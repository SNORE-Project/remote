{"custom.ts":"/**\n * SNORE helper functions\n */\n//% weight=10 color=#0E1525 icon=\"\\uf236\" groups=[\"Wristwatch\", \"Stationary\"]\nnamespace snore {\n    radio.setGroup(0);\n\n    interface DataStore {\n        accel: number,\n        pulse?: number,\n        vol: number,\n        bpData?: Array<number>\n    }\n\n    const statStore: DataStore = {\n        accel: 0,\n        pulse: 0,\n        vol: 0\n    };\n\n    const watchStore: DataStore = {\n        accel: 0,\n        vol: 0,\n        bpData: []\n    };\n\n    let day: number;\n\n    function formatDay(givenDay: number): string {\n        let output = givenDay.toString();\n        if (output.length == 1) {\n            return \"0\" + output;\n        } else {\n            return output;\n        }\n    }\n\n    function getCurrentDay(): number {\n        let latest = 1;\n        let go = true; \n        while (go) {\n            if (IM01.fileExists(`${formatDay(day)}.csv`)) {\n                latest++;\n            } else {\n                go = false;\n            }\n        }\n\n        return latest;\n    }\n\n    function avg(arr: Array<number>): number {\n        let total = 0;\n\n        for (let i = 0; i < arr.length; i++) {\n            total += arr[i];\n        }\n\n        return total / arr.length;\n    }\n\n    // Stationary\n\n    /**\n     * Initialise the data store and the csv file\n     */\n    //% block=\"initialise\" group=\"Stationary\"\n    export function initialise(): void {\n        day = getCurrentDay();\n\n        IM01.overwriteFile(`${formatDay(day)}.csv`, \"accel,pulse,vol\\n\");\n        IM01.overwriteFile(\"id.txt\", control.deviceSerialNumber().toString());\n    }\n\n    /**\n    * Save received data to temporary storage\n    */\n    //% block=\"receive data\" group=\"Stationary\"\n    export function receiveData(name: string, value: number): void {\n        if (name == \"accel\") {\n            statStore.accel = value;\n        } else if (name == \"pulse\") {\n            statStore.pulse = value;\n        } else if (name == \"vol\") {\n            statStore.vol = value;\n        }\n    }\n\n    /**\n     * Save the data in temporary storage to the sd card\n     */\n    //% block=\"store data\" group=\"Stationary\"\n    export function storeData(): void {\n        IM01.appendFileLine(`${formatDay(day)}.csv`, `${statStore.accel},${statStore.pulse},${statStore.vol}`)\n    }\n\n    // Wristwatch\n\n    /**\n     * Record the current acceleration\n     */\n    //% block=\"record acceleration\" group=\"Wristwatch\"\n    export function recordAccel(): void {\n        watchStore.accel = Math.sqrt(\n            input.acceleration(Dimension.X) ** 2 +\n            input.acceleration(Dimension.Y) ** 2 +\n            input.acceleration(Dimension.Z) ** 2\n        );\n    }\n\n    /**\n     * Record the current volume\n     */\n    //% block=\"record volume\" group=\"Wristwatch\"\n    export function recordVol(): void {\n        watchStore.vol = input.soundLevel();\n    }\n\n    /**\n     * Record the current blood pressure\n     */\n    //% block=\"record blood pressure\" group=\"Wristwatch\"\n    export function recordBP(): void {\n        watchStore.bpData.push(pins.analogReadPin(AnalogPin.P0));\n    }\n\n    /**\n     * Send the data from the wristwatch to the stationary micro:bit\n     */\n    //% block=\"send data\" group=\"Wristwatch\"\n    export function sendData(): void {\n        radio.sendValue(\"accel\", watchStore.accel);\n        radio.sendValue(\"pulse\", avg(watchStore.bpData))\n        radio.sendValue(\"vol\", watchStore.vol);\n    }\n}","main.ts":"","pxt.json":"{\n    \"name\": \"snore library\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"IM01\": \"github:xinabox/pxt-im01#v0.1.8\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"custom.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"5.0.12\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n","test.ts":"// Initialise\nsnore.initialise();\nradio.onReceivedValue(snore.storeData)\n\n// Wristwatch tests\nsnore.recordAccel();\nsnore.recordBP();\nsnore.recordVol();\nsnore.sendData();\n\n// Stationary tests\nsnore.storeData();"}